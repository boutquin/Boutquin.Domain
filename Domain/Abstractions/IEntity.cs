// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.

namespace Boutquin.Domain.Abstractions;

/// <summary>
/// Represents a domain entity that can generate and store domain events.
/// </summary>
/// <remarks>
/// <para>
/// The IEntity interface is intended for domain entities in a domain-driven design context. 
/// Entities that implement this interface can generate domain events as a result of executing business logic.
/// These events can then be used by other parts of the system to react to changes in the state of the entity.
/// </para>
/// <para>
/// Implementing this interface allows a standardized way to collect and manage domain events
/// that are raised by the entity. These events can subsequently be dispatched to event handlers or
/// persisted for event sourcing purposes.
/// </para>
/// </remarks>
public interface IEntity
{
    /// <summary>
    /// Retrieves the collection of domain events generated by the entity.
    /// </summary>
    /// <returns>A read-only list of domain events.</returns>
    /// <remarks>
    /// This method should be used to access the domain events that have been raised by the entity.
    /// It is typically used by infrastructure code, such as repositories or event dispatchers, to
    /// process or persist the events.
    /// </remarks>
    IReadOnlyList<IDomainEvent> GetDomainEvents();

    /// <summary>
    /// Clears the collection of domain events.
    /// </summary>
    /// <remarks>
    /// Once domain events have been processed (e.g., dispatched or persisted), this method should be called
    /// to remove them from the entity. This prevents the same events from being processed more than once.
    /// </remarks>
    void ClearDomainEvents();
}
